@startuml
actor User
participant "Simulation" as Sim
participant "Animal" as Animal
participant "Employe" as Emp
participant "Visiteur" as Vis
participant "StatistiquesReserve" as Stats

User -> Sim : passerJournee()
activate Sim

Sim -> Sim : gererEvenementsQuotidiens()
activate Sim
Sim -> Animal : incrementerJoursDepuisReproduction()
Sim -> Animal : incrementerJoursPassesDansEnclos()
deactivate Sim

Sim -> Sim : verifierReproductions()
activate Sim
Sim -> Animal : peutSeReproduireAvec()
Sim -> Animal : seReproduire()
deactivate Sim

Sim -> Sim : gererEmployes()
activate Sim
Sim -> Emp : estEnRepos()
alt est en repos
    Sim -> Emp : diminuerJoursDeRepos()
else n'est pas en repos
    Sim -> Emp : travaillerJournee()
    Sim -> Emp : effectuerTache()
    Sim -> Emp : estTropFatigue()
    alt est trop fatiguÃ©
        Sim -> Stats : ajouterIncident()
    end
end
deactivate Sim

Sim -> Sim : mettreAJourSatisfactionVisiteurs()
activate Sim
Sim -> Sim : calculerFacteurSanteAnimaux()
Sim -> Sim : calculerFacteurPropreteEnclos()
Sim -> Stats : updateSatisfactionVisiteurs()
deactivate Sim

Sim -> Sim : gererNouveauxVisiteurs()
activate Sim
Sim -> Sim : calculerNombreVisiteurs()
create Vis
Sim -> Vis : new Visiteur()
Sim -> Vis : acheterBillet()
Sim -> Stats : ajouterRecette()
Sim -> Vis : observerAnimal()
Sim -> Stats : ajouterVisiteur()
deactivate Sim

Sim -> Animal : manger()

deactivate Sim

@enduml 